int	sort_a(t_list	**a, t_list **b, size_t	len_a)
{
	int		ret_pb;
	int		ret_ra;
	int		pivot;
	t_list	*tmpa;
	t_list	*tmpb;

	(*a) = tmpa;
	(*b) = tmpb;
	if (len_a <= 3)
	{
		if (len_a == 2)
			sorttwo(tmpa);
		else if (len_a == 3)
			sorttrois(tmpa);
		return (0);
	}
	else if (len_a > 3)
	{
		if ()
		{
			pivot = sort_list(tmpa, len_a);
			if ((tmpa)->content < pivot)
			{
				pb(tmpa, tmpb);
				ret_pb += 1;
			}
			else if ((tmpa)->content >= pivot)
			{
				ra(tmpa);
				ret_ra += 1;
			}
			sort_a (tmpa, tmpb, len_a);
			return (0);
		}
		else
		{
			if (len_a == 2)
			{
				if (tmpa->next->content < tmpa->content)
					sa(tmpa);
			}
			else
			{
				if (tmpa->next->next->content > tmpa->content \
					&& tmpa->next->next->content > tmpa->next->content)
					if (tmpa->content > tmpa->next->content)
						sa(tmpa);
				else if (tmpa->content > tmpa->next->content \
				&& tmpa->content > tmpa->next->next->content)
				{
					if (tmpa->next->content > tmpa->next->next->content)
					{
						sa(tmpa);
						ra(tmpa);
						sa(tmpa);
						rra(tmpa);
						sa(tmpa);
					}
					else
					{
						sa(tmpa);
						ra(tmpa);
						sa(tmpa);
						rra(tmpa);
					}
				}
				else if (tmpa->next->content > tmpa->content \
				&& tmpa->next->content > tmpa->next->next->content)
				{
					if (tmpa->next->next->content > tmpa->content)
					{
						ra(tmpa);
						sa(tmpa);
						rra(tmpa);
					}
					else
					{
						ra(tmpa);
						sa(tmpa);
						rra(tmpa);
						sa(tmpa);
					}
				}
				else if (tmpa->content > tmpa->next->content \
				&& tmpa->content > tmpa->next->next->content)
				{
					if (tmpa->next->content > tmpa->next->next->content)
					{
						sa(tmpa);
						ra(tmpa);
						sa(tmpa);
						rra(tmpa);
						sa(tmpa);
					}
					else
					{
						sa(tmpa);
						ra(tmpa);
						sa(tmpa);
						rra(tmpa);
					}
				}
			}
		}
	}
	tmpa = tmpa->next;
}

int	sort_a(t_list	**a, t_list **b, size_t	len_a)
{
	int		ret_pb;
	int		ret_ra;
	int		pivot;
	t_list	*tmpa;
	t_list	*tmpb;

	tmpa = (*a);
	tmpb = (*b);
	if (len_a <= 3)
	{
		if (len_a == 2)
			sorttwo(tmpa);
		else if (len_a == 3)
		{
			if (ft_lstsize(tmpa) == 3)
				sorttrois(tmpa);
			else
				sorttroistop(tmpa, tmpb, len_a);
		}
		return (0);
	}
	pivot = sort_list(tmpa, len_a);
	if ((tmpa)->content < pivot)
	{
		pb(tmpa, tmpb);
		ret_pb += 1;
	}
	else if ((tmpa)->content >= pivot)
	{
		ra(tmpa);
		ret_ra += 1;
	}
	sort_a (tmpa, tmpb, len_a);
	return (0);
}